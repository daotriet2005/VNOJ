#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;
typedef pair<ll,ll> data;
#define fore(i,a,b) for (ll i=a;i<=b;i++)
#define forw(i,a,b) for (ll i=a;i>=b;i--)
#define fast {ios::sync_with_stdio(false); cin.tie(0); }
#define fi first
#define se second
#define pu push
#define pb push_back
#define fr front
const ll oo=1e10;
const ll MOD=1e9+7;
data save[100005];
ll le,ri,n,x;
ll dp[100005],ans,seg[400005],limit[100005];
void update(int id, int l, int r, ll val)
{
    if (l==r && limit[r]==val)
    {
        //cout<<"// "<<r<<endl;
        seg[id]++;
        return;
    }
    if (val<limit[l] || limit[r]<val) return;
    int mid=(l+r)/2;
    update(id*2,l,mid,val);
    update(id*2+1,mid+1,r,val);
    seg[id]=seg[id*2]+seg[id*2+1];
}
ll getsum(int id, int l, int r, ll u, ll v)
{
    //cout<<l<<" "<<r<<endl;
    if (u<=limit[l] && limit[r]<=v) return seg[id];
    if (limit[r]<u || v<limit[l]) return 0;
    int mid=(l+r)/2;
    return getsum(id*2,l,mid,u,v)+getsum(id*2+1,mid+1,r,u,v);
}
int main()
{
    fast;
    cin>>n>>le>>ri;
    for(int i=1;i<=n;i++)
    {
        cin>>x;
        dp[i]=dp[i-1]+x;
        save[i].fi=dp[i];
        save[i].se=i;
    }
    sort(save,save+1+n);
    ll max1=-1e18;
    ll dem=0;
    fore(i,0,n)
    {
    //cout<<save[i].fi<<endl;
    if (max1<save[i].fi)
    {
        max1=save[i].fi;
        dem++;
        limit[dem]=save[i].fi;
    }
    }
    update(1,1,dem,0);
    fore(i,1,n)
    {
        ll val=dp[i];
        ll p=getsum(1,1,dem,val-ri,val-le);
        ans+=p;
        update(1,1,dem,val);
    }
    cout<<ans;
    return 0;
}