#include <bits/stdc++.h>
#pragma GCC optimize("O3")
using namespace std;
typedef long long int ll;
typedef pair<ll,ll> data;
#define forw(i,a,b) for (ll i=a;i<=b;i++)
#define forb(i,a,b) for (ll i=a;i>=b;i--)
#define fast {ios::sync_with_stdio(false); cin.tie(0); }
#define fi first
#define se second
#define pu push
#define puf push_front
#define pb push_back
#define pof pop_front
#define pob pop_back
#define fr front
#define all(a) a.begin(),a.end()
const ll oo=1e18;
const ll mod=5000000;
const ll maxN=1e5+5;
const int tx[4]={0,0,1,-1};
const int ty[4]={1,-1,0,1};
const int maxd=10000;
const int limit=1e5+1;
const int base = 1000000000;
int dp[2005][2005];
int st,en,n,ans;
string s;
void solve()
{
    cin>>s;
    n=s.length();
    s=' '+s;
    forw(i,1,n)
        dp[i][i]=1;
    forw(length,1,n-1)
    {
        forw(l,1,n-length)
        {
            int r=l+length;
            if (s[l]==s[r]) dp[l][r]=dp[l+1][r-1]+2;
            else dp[l][r]=max(dp[l+1][r],dp[l][r-1]);
        }
    }
    string ans="";
    int l=1;
    int r=n;
    while (l<=r)
    {
        if (s[l]==s[r])
        {
            ans=ans+s[r];
            l++;
            r--;
        }
        else
            if (dp[l+1][r]>dp[l][r-1]) l++;
            else r--;
    }
    if (dp[1][n]%2)
    {
        forw(i,0,ans.length()-1) cout<<ans[i];
        forb(i,ans.length()-2,0) cout<<ans[i];
    }
    else
    {
        forw(i,0,ans.length()-1) cout<<ans[i];
        forb(i,ans.length()-1,0) cout<<ans[i];
    }
}
int main()
{
    fast;
    //freopen("test.inp","r",stdin);
    //freopen("test.out","w",stdout);
    ll t=1; //cin>>t;
    while (t--) solve();
    return 0;
}