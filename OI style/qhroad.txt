#include <bits/stdc++.h>
#pragma GCC optimize("O3")
using namespace std;
typedef long long int ll;
typedef pair<ll,ll> data;
typedef pair<int, pair<int, int> > pii;
#define forw(i,a,b) for (int i=a;i<=b;i++)
#define forb(i,a,b) for (int i=a;i>=b;i--)
#define fast {ios::sync_with_stdio(false); cin.tie(0); }
#define fi first
#define se second
#define pu push
#define puf push_front
#define pb push_back
#define pof pop_front
#define pob pop_back
#define fr front
#define all(a) a.begin(),a.end()
const ll oo=1e18;
const ll mod=1e9+7;
const ll maxN=1e5+5;
const int tx[4]={0,0,1,-1};
const int ty[4]={1,-1,0,0};
const ll base=31;
int n,m,q,destroy[maxN],except[maxN],father[maxN],out[maxN];
data edge[maxN];
int findFather(int u)
{
    if (father[u]==u) return u;
    return father[u]=findFather(father[u]);
}
void solve()
{
    cin>>n>>m>>q;
    forw(i,1,n) father[i]=i;
    forw(i,1,m)
    {
        int u,v;
        cin>>u>>v;
        edge[i]={u,v};
    }
    forw(i,1,q)
    {
        cin>>destroy[i];
        except[destroy[i]]=true;
    }
    int ans=n;
    forw(i,1,m)
    if (!except[i])
    {
        int u=edge[i].fi;
        int v=edge[i].se;
        int father_u=findFather(u);
        int father_v=findFather(v);
        if (father_u!=father_v)
        {
            ans--;
            father[father_u]=father_v;
        }
    }
    forb(i,q,1)
    {
        out[i]=ans;
        int u=edge[destroy[i]].fi;
        int v=edge[destroy[i]].se;
        int father_u=findFather(u);
        int father_v=findFather(v);
        if (father_u!=father_v)
        {
            ans--;
            father[father_u]=father_v;
        }
    }
    forw(i,1,q) cout<<out[i]<<endl;
}
int main()
{
    fast;
    //freopen("test.inp","r",stdin);
    //freopen("test.out","w",stdout);
    ll t=1; //cin>>t;
    while (t--) solve();
    return 0;
}